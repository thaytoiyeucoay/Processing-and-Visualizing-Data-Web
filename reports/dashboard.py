import streamlit as st
import pandas as pd
import os
import json
import tempfile
import glob
from kaggle.api.kaggle_api_extended import KaggleApi
import time
import numpy as np
import duckdb as db
import matplotlib.pyplot as plt
import seaborn as sns
import plotly.express as px
import re
import io

def designPage():
    st.set_page_config(
    page_title="·ª®ng d·ª•ng X·ª≠ L√Ω D·ªØ Li·ªáu",
    page_icon="üöÄ",
    layout="wide",  # "centered" ho·∫∑c "wide"
    initial_sidebar_state="expanded",  # "expanded" ho·∫∑c "collapsed"
    menu_items={
         'Get Help': 'https://example.com/help',
         'Report a bug': 'https://example.com/bug',
         'About': '·ª®ng d·ª•ng x·ª≠ l√Ω d·ªØ li·ªáu ƒë∆∞·ª£c thi·∫øt k·∫ø b·ªüi Khanh Duy Bui'
     }
)

# Thi·∫øt k·∫ø ti√™u ƒë·ªÅ
def designTitle():
    st.markdown("""
    <style>
    @keyframes gradient {
      0% {
        background-position: 0% 50%;
      }
      50% {
        background-position: 100% 50%;
      }
      100% {
        background-position: 0% 50%;
      }
    }
    .animated-gradient-title {
        font-size: 40px;
        font-weight: bold;
        text-align: center;
        background: linear-gradient(-45deg, #FF5733, #33C9FF, #9B59B6, #E74C3C);
        background-size: 400% 400%;
        -webkit-background-clip: text;
        -webkit-text-fill-color: transparent;
        animation: gradient 8s ease infinite;
    }
    </style>
    <p class="animated-gradient-title"> Ph·∫ßn m·ªÅm x·ª≠ l√Ω d·ªØ li·ªáu - Khanh Duy Bui</p>
    """, unsafe_allow_html=True)

def uploadData():
  st.subheader("T·∫£i l√™n b·ªô d·ªØ li·ªáu c·ªßa b·∫°n")
  uploaded_file = st.file_uploader("Ch·ªçn file CSV ƒë·ªÉ t·∫£i l√™n", type=["csv"])
  return uploaded_file

# T·∫£i l√™n v√† hi·ªÉn th·ªã d·ªØ li·ªáu t·ª´ file CSV
def displayData():
  if uploaded_file is not None:
    try:
      encodings = ['latin1', 'ISO-8859-1', 'cp1252', 'windows-1252']
      for encoding in encodings:
        try:
            df = pd.read_csv(uploaded_file, encoding=encoding)
            break
        except Exception as e:
            continue
      st.subheader("Th√¥ng tin b·ªô d·ªØ li·ªáu")
      st.write(f"S·ªë h√†ng: {df.shape[0]}")
      st.write(f"S·ªë c·ªôt: {df.shape[1]}")
      st.subheader("D·ªØ li·ªáu ƒë√£ t·∫£i l√™n")
      st.dataframe(df)
      st.subheader("Th·ªëng k√™ m√¥ t·∫£")
      st.write(df.describe())
      csv = df.to_csv(index=False)
      st.download_button(
        label="T·∫£i xu·ªëng d·ªØ li·ªáu d∆∞·ªõi d·∫°ng CSV",
        data=csv,
        file_name="data_processed.csv",
        mime="text/csv",
        )
    except Exception as e:
      st.error(f"ƒê√£ x·∫£y ra l·ªói khi x·ª≠ l√Ω file CSV: {e}")
      
    return df
    
        
def filterData(file_data):
    if file_data is not None:
      st.header("L·ªçc d·ªØ li·ªáu")
      filter_columns = st.multiselect("Ch·ªçn c·ªôt ƒë·ªÉ l·ªçc", file_data.columns)
        
      filtered_df = file_data.copy()
      for column in filter_columns:
        unique_values = filtered_df[column].unique()
        selected_value = st.selectbox(f"Ch·ªçn gi√° tr·ªã cho {column}", unique_values, key=column)
        filtered_df = filtered_df[filtered_df[column] == selected_value]
        
      st.write("### D·ªØ li·ªáu sau khi l·ªçc:")
      st.dataframe(filtered_df)
  

def visualizeData(file_data):
  if file_data is not None:
    st.header("Tr·ª±c quan h√≥a d·ªØ li·ªáu")
    numeric_cols = file_data.select_dtypes(include=['int64', 'float64']).columns.tolist()
    categorical_cols = file_data.select_dtypes(include=['object', 'category']).columns.tolist()
    datetime_cols = file_data.select_dtypes(include=['datetime64']).columns.tolist()
    
    # Chart selection tabs
    chart_type = st.selectbox(
        "Ch·ªçn lo·∫°i bi·ªÉu ƒë·ªì:",
        ["Bi·ªÉu ƒë·ªì t·∫ßn su·∫•t/ph√¢n ph·ªëi (Histogram/Distribution)", "Bi·ªÉu ƒë·ªì ph√¢n t√°n (Scatter Plot)", "Bi·ªÉu ƒë·ªì thanh (Bar Chart)", "Bi·ªÉu ƒë·ªì ƒë∆∞·ªùng (Line Chart)", "Bi·ªÉu ƒë·ªì t∆∞∆°ng quan (Correlation Heatmap)", "Bi·ªÉu ƒë·ªì h·ªôp (Box Plot)", "Bi·ªÉu ƒë·ªì tr√≤n (Pie Chart)"]
    )
    
    if chart_type == "Bi·ªÉu ƒë·ªì t·∫ßn su·∫•t/ph√¢n ph·ªëi (Histogram/Distribution)":
        if numeric_cols:
            col_to_plot = st.selectbox("L·ª±a ch·ªçn c·ªôt ƒë·ªÉ tr·ª±c quan:", numeric_cols)
            bins = st.slider("Number of bins:", 5, 100, 30)
            
            col1, col2 = st.columns(2)
            
            with col1:
                st.subheader(f"T·∫ßn su·∫•t c·ªßa c·ªôt {col_to_plot}")
                fig, ax = plt.subplots(figsize=(10, 6))
                ax.hist(file_data[col_to_plot].dropna(), bins=bins, alpha=0.7)
                ax.set_xlabel(col_to_plot)
                ax.set_ylabel("T·∫ßn su·∫•t")
                st.pyplot(fig)
            
            with col2:
                st.subheader(f"Ph√¢n ph·ªëi c·ªßa c·ªôt {col_to_plot}")
                fig, ax = plt.subplots(figsize=(10, 6))
                sns.kdeplot(file_data[col_to_plot].dropna(), fill=True, ax=ax)
                ax.set_xlabel(col_to_plot)
                ax.set_ylabel("Ph√¢n ph·ªëi")
                st.pyplot(fig)
                
            # Display descriptive statistics
            st.subheader(f"Th·ªëng k√™ m√¥ t·∫£ cho {col_to_plot}")
            stats = file_data[col_to_plot].describe()
            st.dataframe(stats)
        else:
            st.warning("Kh√¥ng c√≥ c·ªôt s·ªë n√†o ƒë∆∞·ª£c t√¨m th·∫•y trong b·ªô d·ªØ li·ªáu ƒë·ªÉ tr·ª±c quan h√≥a bi·ªÉu ƒë·ªì")
    
    elif chart_type == "Bi·ªÉu ƒë·ªì ph√¢n t√°n (Scatter Plot)":
        if len(numeric_cols) >= 2:
            col1, col2 = st.columns(2)
            
            with col1:
                x_col = st.selectbox("L·ª±a ch·ªçn tr·ª•c X:", numeric_cols)
            
            with col2:
                y_col = st.selectbox("L·ª±a ch·ªçn tr·ª•c Y:", 
                                    [col for col in numeric_cols if col != x_col] if len(numeric_cols) > 1 else numeric_cols)
            
            color_col = st.selectbox("L·ª±a ch·ªçn C·ªôt m√†u (T√πy ch·ªçn)::", 
                                    ["None"] + categorical_cols + numeric_cols)
            
            if color_col == "None":
                fig = px.scatter(file_data, x=x_col, y=y_col, title=f"{y_col} vs {x_col}")
            else:
                fig = px.scatter(file_data, x=x_col, y=y_col, color=color_col, 
                                title=f"{y_col} vs {x_col} (colored by {color_col})")
            
            st.plotly_chart(fig, use_container_width=True)
            
            # Show correlation
            correlation = file_data[[x_col, y_col]].corr().iloc[0, 1]
            st.write(f"**H·ªá s·ªë t∆∞∆°ng quan:** {correlation:.4f}")
        else:
            st.warning("Bi·ªÉu ƒë·ªì ph√¢n t√°n y√™u c·∫ßu √≠t nh·∫•t 2 c·ªôt s·ªë. B·ªô d·ªØ li·ªáu c·ªßa b·∫°n kh√¥ng ƒë√°p ·ª©ng ƒë∆∞·ª£c y√™u c·∫ßu!")
    
    elif chart_type == "Bi·ªÉu ƒë·ªì thanh (Bar Chart)":
        if categorical_cols:
            x_col = st.selectbox("Ch·ªçn c·ªôt ph√¢n lo·∫°i : (c·ªôt X):", categorical_cols)
            
            # Option for aggregation
            agg_options = ["Count", "Sum", "Mean", "Median", "Min", "Max"]
            agg_type = st.selectbox("L·ª±a ch·ªçn h√¨nh th·ª©c:", agg_options)
            
            if agg_type == "Count":
                # Just count the occurrences
                data = file_data[x_col].value_counts().reset_index()
                data.columns = [x_col, 'Count']
                y_val = 'Count'
                title = f"Count of {x_col}"
            else:
                # Need a numeric column to aggregate
                if numeric_cols:
                    y_col = st.selectbox("Ch·ªçn c·ªôt th·ª±c hi·ªán h√¨nh th·ª©c (c·ªôt Y):", numeric_cols)
                    agg_func = agg_type.lower()
                    
                    if agg_func == "median":
                        data = file_data.groupby(x_col)[y_col].median().reset_index()
                    else:
                        data = file_data.groupby(x_col).agg({y_col: agg_func}).reset_index()
                    
                    y_val = y_col
                    title = f"{agg_type} of {y_col} by {x_col}"
                else:
                    st.warning("Bi·ªÉu ƒë·ªì thanh y√™u c·∫ßu c√°c c·ªôt s·ªë kh√¥ng c√≥ s·∫µn trong b·ªô d·ªØ li·ªáu c·ªßa b·∫°n!")
                    return
            
            # Sort options
            sort_by = st.selectbox("S·∫Øp x·∫øp theo:", ["Alphabet", "Gi√° tr·ªã"])
            if sort_by == "Gi√° tr·ªã":
                data = data.sort_values(y_val)
            else:
                data = data.sort_values(x_col)
            
            # Limit number of categories if too many
            max_categories = st.slider("S·ªë l∆∞·ª£ng danh m·ª•c t·ªëi ƒëa ƒë·ªÉ hi·ªÉn th·ªã:", 5, 50, 20)
            if len(data) > max_categories:
                data = data.iloc[-max_categories:]
            
            fig = px.bar(data, x=x_col, y=y_val, title=title)
            st.plotly_chart(fig, use_container_width=True)
        else:
            st.warning("Bi·ªÉu ƒë·ªì thanh y√™u c·∫ßu c√°c c·ªôt s·ªë kh√¥ng c√≥ s·∫µn trong b·ªô d·ªØ li·ªáu c·ªßa b·∫°n!")
    
    elif chart_type == "Bi·ªÉu ƒë·ªì ƒë∆∞·ªùng (Line Chart)":
        if datetime_cols:
            date_col = st.selectbox("L·ª±a ch·ªçn c·ªôt th·ªùi gian (c·ªôt X):", datetime_cols)
            y_col = st.selectbox("L·ª±a ch·ªçn c·ªôt s·ªë (c·ªôt Y):", numeric_cols if numeric_cols else ["Kh√¥ng c√≥ c·ªôt s·ªë!"])
            
            if numeric_cols:
                group_by = st.selectbox("Group by (optional):", ["None"] + categorical_cols)
                
                if group_by == "None":
                    fig = px.line(file_data.sort_values(date_col), x=date_col, y=y_col, title=f"{y_col} over Time")
                else:
                    fig = px.line(file_data.sort_values(date_col), x=date_col, y=y_col, color=group_by, title=f"{y_col} over Time by {group_by}")
                
                st.plotly_chart(fig, use_container_width=True)
            else:
                st.warning("Bi·ªÉu ƒë·ªì ƒë∆∞·ªùng y√™u c·∫ßu c√°c c·ªôt s·ªë ho·∫∑c DateTime kh√¥ng c√≥ s·∫µn trong b·ªô d·ªØ li·ªáu c·ªßa b·∫°n!")
        elif numeric_cols:
            st.info("Kh√¥ng t√¨m th·∫•y c·ªôt DateTime. B·∫°n v·∫´n c√≥ th·ªÉ t·∫°o bi·ªÉu ƒë·ªì d√≤ng v·ªõi tr·ª•c X.")
            
            x_options = ["Ch·ªâ s·ªë"] + numeric_cols
            x_col = st.selectbox("Ch·ªçn c·ªôt X:", x_options)
            y_col = st.selectbox("Ch·ªçn c·ªôt Y:", [col for col in numeric_cols if col != x_col] if x_col in numeric_cols else numeric_cols)
            
            if x_col == "Ch·ªâ s·ªë":
                fig = px.line(file_data, y=y_col, title=f"{y_col} by Index")
            else:
                fig = px.line(file_data.sort_values(x_col), x=x_col, y=y_col, title=f"{y_col} vs {x_col}")
            
            st.plotly_chart(fig, use_container_width=True)
        else:
            st.warning("Bi·ªÉu ƒë·ªì ƒë∆∞·ªùng y√™u c·∫ßu c√°c c·ªôt s·ªë ho·∫∑c DateTime kh√¥ng c√≥ s·∫µn trong b·ªô d·ªØ li·ªáu c·ªßa b·∫°n!")
    
    elif chart_type == "Bi·ªÉu ƒë·ªì t∆∞∆°ng quan (Correlation Heatmap)":
        if len(numeric_cols) > 1:
            st.subheader("Ma tr·∫≠n t∆∞∆°ng quan")
            
            # Allow user to select columns
            selected_cols = st.multiselect(
                "Ch·ªçn c√°c c·ªôt ƒë·ªÉ ph√¢n t√≠ch t∆∞∆°ng quan (m·∫∑c ƒë·ªãnh: T·∫•t c·∫£ c√°c c·ªôt s·ªë):",
                numeric_cols,
                default=numeric_cols[:min(8, len(numeric_cols))]  # Default to first 8 columns
            )
            
            if selected_cols:
                corr_matrix = file_data[selected_cols].corr()
                
                # Plot with Plotly for interactivity
                fig = px.imshow(
                    corr_matrix,
                    text_auto=True,
                    color_continuous_scale='RdBu_r',
                    title="Ma tr·∫≠n t∆∞∆°ng quan"
                )
                st.plotly_chart(fig, use_container_width=True)
                
                # Option to display the correlation table
                if st.checkbox("Hi·ªÉn th·ªã c√°c gi√° tr·ªã t∆∞∆°ng quan d∆∞·ªõi d·∫°ng b·∫£ng"):
                    st.dataframe(corr_matrix.style.background_gradient(cmap='coolwarm'))
            else:
                st.warning("Vui l√≤ng ch·ªçn √≠t nh·∫•t 1 c·ªôt ƒë·ªÉ ph√¢n t√≠ch t∆∞∆°ng quan")
        else:
            st.warning("Bi·ªÉu ƒë·ªì t∆∞∆°ng quan y√™u c·∫ßu √≠t nh·∫•t 2 c·ªôt s·ªë. B·ªô d·ªØ li·ªáu c·ªßa b·∫°n kh√¥ng ƒë√°p ·ª©ng ƒë∆∞·ª£c!")
    
    elif chart_type == "Bi·ªÉu ƒë·ªì h·ªôp (Box Plot)":
        if numeric_cols:
            numeric_col = st.selectbox("L·ª±a ch·ªçn c·ªôt d·ªØ li·ªáu s·ªë:", numeric_cols)
            category_col = st.selectbox("Ch·ªçn danh m·ª•c ƒë·ªÉ nh√≥m (t√πy ch·ªçn):", ["None"] + categorical_cols)
            
            if category_col == "None":
                fig = px.box(file_data, y=numeric_col, title=f"Box Plot of {numeric_col}")
            else:
                # Limit categories if too many
                cat_counts = file_data[category_col].value_counts()
                if len(cat_counts) > 15:
                    top_cats = cat_counts.nlargest(15).index.tolist()
                    filtered_df = file_data[file_data[category_col].isin(top_cats)]
                    fig = px.box(filtered_df, x=category_col, y=numeric_col, 
                                title=f"Box Plot of {numeric_col} by {category_col} (top 15 categories)")
                    st.info("Ch·ªâ hi·ªÉn th·ªã 15 h√†ng ƒë·∫ßu do s·ªë l∆∞·ª£ng l·ªõn c√°c danh m·ª•c.")
                else:
                    fig = px.box(file_data, x=category_col, y=numeric_col,
                                title=f"Box Plot of {numeric_col} by {category_col}")
            
            st.plotly_chart(fig, use_container_width=True)
            
            # Show descriptive statistics by group
            if category_col != "None":
                st.subheader(f"Statistics of {numeric_col} by {category_col}")
                st.dataframe(file_data.groupby(category_col)[numeric_col].describe())
        else:
            st.warning("Bi·ªÉu ƒë·ªì h·ªôp y√™u c·∫ßu c√°c c·ªôt s·ªë kh√¥ng c√≥ s·∫µn trong b·ªô d·ªØ li·ªáu c·ªßa b·∫°n. Vui l√≤ng ki·ªÉm tra l·∫°i!")
    
    elif chart_type == "Bi·ªÉu ƒë·ªì tr√≤n (Pie Chart)":
        if categorical_cols:
            cat_col = st.selectbox("Ch·ªçn c·ªôt ph√¢n lo·∫°i:", categorical_cols)
            
            # Option to count or sum
            agg_method = st.selectbox("Ch·ªçn ph∆∞∆°ng ph√°p ph√¢n lo·∫°i:", ["Count", "Sum of numeric column"])
            
            if agg_method == "Count":
                # Get value counts and prepare data
                counts = file_data[cat_col].value_counts()
                
                # Limit slices if too many categories
                max_slices = st.slider("Maximum number of slices:", 3, 15, 8)
                if len(counts) > max_slices:
                    # Keep top N-1 categories and group the rest as "Other"
                    top_counts = counts.nlargest(max_slices - 1)
                    other_count = counts.sum() - top_counts.sum()
                    
                    data = pd.DataFrame({
                        cat_col: list(top_counts.index) + ['Other'],
                        'Count': list(top_counts.values) + [other_count]
                    })
                    
                    fig = px.pie(data, names=cat_col, values='Count', 
                                title=f"Distribution of {cat_col} (top {max_slices-1} categories + Other)")
                else:
                    # Use all categories if not too many
                    data = pd.DataFrame({
                        cat_col: counts.index,
                        'Count': counts.values
                    })
                    fig = px.pie(data, names=cat_col, values='Count', 
                                title=f"Distribution of {cat_col}")
            else:
                if numeric_cols:
                    num_col = st.selectbox("Ch·ªçn c·ªôt ƒë·ªÉ t√≠nh th√†nh t·ªïng::", numeric_cols)
                    
                    # Get sum by category
                    sums = file_data.groupby(cat_col)[num_col].sum().reset_index()
                    
                    # Limit slices if too many
                    max_slices = st.slider("Maximum number of slices:", 3, 15, 8)
                    if len(sums) > max_slices:
                        # Sort and keep top N-1
                        sums = sums.sort_values(num_col, ascending=False)
                        top_sums = sums.head(max_slices - 1)
                        
                        # Create "Other" category
                        other_sum = sums[num_col][max_slices-1:].sum()
                        other_row = pd.DataFrame({cat_col: ['Other'], num_col: [other_sum]})
                        
                        # Combine
                        data = pd.concat([top_sums, other_row])
                        fig = px.pie(data, names=cat_col, values=num_col, 
                                    title=f"Sum of {num_col} by {cat_col} (top {max_slices-1} categories + Other)")
                    else:
                        fig = px.pie(sums, names=cat_col, values=num_col, 
                                    title=f"Sum of {num_col} by {cat_col}")
                else:
                    st.warning("This aggregation method requires numeric columns which are not available in your dataset.")
                    return
            
            # Display the pie chart
            fig.update_traces(textposition='inside', textinfo='percent+label')
            st.plotly_chart(fig, use_container_width=True)
        else:
            st.warning("Pie charts require categorical columns which are not available in your dataset.")

def clean_data(file_data):
    """
    Process and clean the dataframe:
    - Extract numbers from mixed text-numeric columns 
    - Convert percentage strings to numeric values
    - Handle currency values
    - Convert date-like strings to datetime
    """
    if file_data is not None:
        processed_df = file_data.copy()
    
    # Track changes made for reporting
        cleaning_report = []
    
    # Process each column
        for col in processed_df.columns:
        # Skip if column is already numeric or datetime
            if pd.api.types.is_numeric_dtype(processed_df[col]) or pd.api.types.is_datetime64_dtype(processed_df[col]):
                continue
            
        # Check if column has string values
            if processed_df[col].dtype == object:
            # Sample values for pattern detection (avoid NaN)
                sample_values = processed_df[col].dropna().sample(min(5, len(processed_df[col].dropna()))).tolist()
            
            # Skip if no sample values
                if not sample_values:
                    continue
                
            # Check for currency patterns (e.g., "$1,000", "1000 USD", "‚Ç¨2,000")
                currency_pattern = r'(?:[$‚Ç¨¬£¬•]\s*[\d,.]+)|(?:[\d,.]+\s*[$‚Ç¨¬£¬•])|(?:[\d,.]+\s*(?:USD|EUR|GBP|JPY|CAD|AUD))'
            
            # Check for percentage patterns (e.g., "10%", "10.5 %")
                percentage_pattern = r'[\d,.]+\s*%'
            
            # Check for mixed numeric patterns (e.g., "900 units", "1,200 items")
                mixed_numeric_pattern = r'[\d,.]+\s*\w+'
            
            # Function to extract numeric value from string
                def extract_numeric(val):
                    if pd.isna(val) or not isinstance(val, str):
                        return val
                # Extract all digits, commas, dots, minus signs
                    matches = re.findall(r'-?[\d,.]+', str(val))
                    if matches:
                    # Replace commas with empty and convert to float
                        return float(matches[0].replace(',', ''))
                    return val
            
            # Check patterns in sample values
                has_currency = any(re.search(currency_pattern, str(val)) for val in sample_values)
                has_percentage = any(re.search(percentage_pattern, str(val)) for val in sample_values)
                has_mixed_numeric = any(re.search(mixed_numeric_pattern, str(val)) for val in sample_values)
            
            # Apply transformations based on detected patterns
                if has_currency:
                    original_col = processed_df[col].copy()
                    processed_df[col] = processed_df[col].apply(extract_numeric)
                
                # Report changes if successful
                    if pd.api.types.is_numeric_dtype(processed_df[col]):
                        cleaning_report.append(f"Converted currency column '{col}' to numeric values")
                    
                    # Store currency unit if consistent
                        currency_units = set()
                        for val in original_col.dropna():
                            if isinstance(val, str):
                            # Extract currency symbol or code
                                currency_match = re.search(r'([$‚Ç¨¬£¬•]|USD|EUR|GBP|JPY|CAD|AUD)', str(val))
                                if currency_match:
                                    currency_units.add(currency_match.group(0))
                    
                        if len(currency_units) == 1:
                            unit = list(currency_units)[0]
                        # Create metadata for the column
                            processed_df[f"{col}_unit"] = unit
                            cleaning_report.append(f"Stored currency unit '{unit}' for column '{col}'")
                
                elif has_percentage:
                    processed_df[col] = processed_df[col].apply(lambda x: extract_numeric(x) / 100 if isinstance(x, str) and '%' in x else x)
                    if pd.api.types.is_numeric_dtype(processed_df[col]):
                        cleaning_report.append(f"Converted percentage column '{col}' to decimal values")
                        processed_df[f"{col}_is_percentage"] = True
                
                elif has_mixed_numeric:
                    original_col = processed_df[col].copy()
                    processed_df[col] = processed_df[col].apply(extract_numeric)
                
                    if pd.api.types.is_numeric_dtype(processed_df[col]):
                        cleaning_report.append(f"Extracted numeric values from mixed column '{col}'")
                    
                    # Try to extract consistent units
                        units = set()
                        for val in original_col.dropna():
                            if isinstance(val, str):
                            # Extract potential unit after number
                                unit_match = re.search(r'[\d,.]+\s*(\w+)', str(val))
                                if unit_match:
                                    units.add(unit_match.group(1))
                    
                        if len(units) == 1:
                            unit = list(units)[0]
                            processed_df[f"{col}_unit"] = unit
                            cleaning_report.append(f"Stored unit '{unit}' for column '{col}'")

            # Try to convert to datetime if not already processed
                if processed_df[col].dtype == object:
                    try:
                    # Check if at least 90% of non-NA values can be parsed as dates
                        non_na_count = processed_df[col].dropna().shape[0]
                        if non_na_count > 0:
                            date_conversion = pd.to_datetime(processed_df[col], errors='coerce')
                            if date_conversion.notna().sum() / non_na_count >= 0.9:
                                processed_df[col] = date_conversion
                                cleaning_report.append(f"Converted column '{col}' to datetime format")
                    except:
                        pass
    
        return processed_df, cleaning_report

def processingData(file_data):
  cleaning_method = st.radio(
        "L·ª±a ch·ªçn ph∆∞∆°ng ph√°p l√†m s·∫°ch d·ªØ li·ªáu:",
        ["T·ª± ƒë·ªông (Beta)", "L·ª±a ch·ªçn c·ªôt th·ªß c√¥ng"]
    )
    
  if cleaning_method == "T·ª± ƒë·ªông (Beta)" and file_data is not None:
    processed_df, cleaning_report = clean_data(file_data)
    if cleaning_report:
      st.success("L√†m s·∫°ch th√†nh c√¥ng! H√£y ki·ªÉm tra l·∫°i b·ªô d·ªØ li·ªáu. N·∫øu ch∆∞a ph√π h·ª£p h√£y l√†m s·∫°ch th·ªß c√¥ng ")
      for item in cleaning_report:
        st.write(f"‚úì {item}")
    else:
      st.info("B·ªô d·ªØ li·ªáu kh√¥ng c·∫ßn l√†m s·∫°ch!")
        
    if st.checkbox("So s√°nh d·ªØ li·ªáu tr∆∞·ªõc v√† sau khi l√†m s·∫°ch"):
      col1, col2 = st.columns(2)
      with col1:
        st.subheader("Tr∆∞·ªõc")
        st.dataframe(file_data.head(10))
      with col2:
        st.subheader("Sau")
        st.dataframe(processed_df.head(10))
                
        return processed_df
    else:
        return processed_df
  elif cleaning_method == "L·ª±a ch·ªçn c·ªôt th·ªß c√¥ng" and file_data is not None:
    st.markdown("#### L·ª±a ch·ªçn c·ªôt c·∫ßn x·ª≠ l√Ω:")
    col_changes = {}
    for col in file_data.columns:
      if pd.api.types.is_numeric_dtype(file_data[col]) or pd.api.types.is_datetime64_dtype(file_data[col]):
        continue
      sample_values = file_data[col].dropna().sample(min(3, len(file_data[col].dropna()))).tolist()
      if sample_values and isinstance(sample_values[0], str):
        st.markdown(f"**{col}**  \nD·ªØ li·ªáu m·∫´u: `{', '.join(str(x) for x in sample_values[:3])}`")
        options = ["Gi·ªØ nguy√™n"]
        if any(re.search(r'[\d,.]+', str(val)) for val in sample_values):
          options.append("Tr√≠ch xu·∫•t gi√° tr·ªã s·ªë")
        if any(re.search(r'%', str(val)) for val in sample_values):
          options.append("Chuy·ªÉn ƒë·ªïi t·ª∑ l·ªá ph·∫ßn trƒÉm th√†nh s·ªë th·∫≠p ph√¢n")
        if any(re.search(r'[$‚Ç¨¬£¬•]|USD|EUR', str(val)) for val in sample_values):
          options.append("Tr√≠ch xu·∫•t c√°c gi√° tr·ªã ti·ªÅn t·ªá")
        try:
          pd.to_datetime(file_data[col].iloc[0], errors='raise')
          options.append("Chuy·ªÉn ƒë·ªïi ƒë·ªãnh d·∫°ng ng√†y/gi·ªù")
        except:
          pass
                
        choice = st.selectbox(f"X·ª≠ l√Ω c·ªôt '{col}' :", options, key=f"process_{col}")
        if choice != "Gi·ªØ nguy√™n":
          col_changes[col] = choice
                    
    if col_changes:
      processed_df = file_data.copy()
      for col, change_type in col_changes.items():
        if change_type == "Tr√≠ch xu·∫•t gi√° tr·ªã s·ªë":
          processed_df[col] = processed_df[col].apply(
              lambda x: float(re.findall(r'-?[\d,.]+', str(x))[0].replace(',', '')) 
              if isinstance(x, str) and re.findall(r'-?[\d,.]+', str(x)) else x
          )
          st.success(f"Tr√≠ch xu·∫•t gi√° tr·ªã t·ª´ c·ªôt '{col}'")
        elif change_type == "Chuy·ªÉn ƒë·ªïi t·ª∑ l·ªá ph·∫ßn trƒÉm th√†nh s·ªë th·∫≠p ph√¢n":
          processed_df[col] = processed_df[col].apply(
            lambda x: float(re.findall(r'-?[\d,.]+', str(x))[0].replace(',', '')) / 100 
            if isinstance(x, str) and '%' in x and re.findall(r'-?[\d,.]+', str(x)) else x
          )
          st.success(f"Chuy·ªÉn ƒë·ªïi gi√° tr·ªã ph·∫ßn trƒÉm c·ªßa c·ªôt '{col}' th√†nh gi√° tr·ªã th·∫≠p ph√¢n")
        elif change_type == "Tr√≠ch xu·∫•t c√°c gi√° tr·ªã ti·ªÅn t·ªá":
          processed_df[col] = processed_df[col].apply(
            lambda x: float(re.findall(r'-?[\d,.]+', str(x))[0].replace(',', '')) 
            if isinstance(x, str) and re.findall(r'-?[\d,.]+', str(x)) else x
          )
          st.success(f"Chuy·ªÉn ƒë·ªïi ƒë·ªãnh d·∫°ng ti·ªÅn t·ªá '{col}'")
        elif change_type == "Chuy·ªÉn ƒë·ªïi ƒë·ªãnh d·∫°ng ng√†y/gi·ªù":
          processed_df[col] = pd.to_datetime(processed_df[col], errors='coerce')
          st.success(f"Chuy·ªÉn ƒë·ªïi c·ªôt '{col}' th√†nh ƒë·ªãnh d·∫°ng ng√†y gi·ªù")
            
      if st.checkbox("So s√°nh d·ªØ li·ªáu tr∆∞·ªõc v√† sau khi l√†m s·∫°ch"):
        col1, col2 = st.columns(2)
        with col1:
          st.subheader("Tr∆∞·ªõc")
          st.dataframe(file_data.head(10))
        with col2:
          st.subheader("Sau")
          st.dataframe(processed_df.head(10))
                    
      return processed_df
    else:
      st.info("Kh√¥ng c·ªôt n√†o ƒë∆∞·ª£c l·ª±a ch·ªçn ƒë·ªÉ x·ª≠ l√Ω. S·ª≠ d·ª•ng d·ªØ li·ªáu ban ƒë·∫ßu!!!")
      return file_data
    

designPage()   
designTitle()
uploaded_file = uploadData()
df = displayData()
processed_data = processingData(df)
filterData(processed_data)
visualizeData(processed_data)

